// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file datatypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DATATYPES_H_
#define _DATATYPES_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(datatypes_SOURCE)
#define datatypes_DllAPI __declspec( dllexport )
#else
#define datatypes_DllAPI __declspec( dllimport )
#endif // datatypes_SOURCE
#else
#define datatypes_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define datatypes_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Timestamp defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Timestamp
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Timestamp();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Timestamp();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            const Timestamp& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp(
            Timestamp&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            const Timestamp& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Timestamp that will be copied.
     */
    eProsima_user_DllExport Timestamp& operator =(
            Timestamp&& x);

    /*!
     * @brief Comparison operator.
     * @param x Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Timestamp& x);

    /*!
     * @brief Comparison operator.
     * @param x Timestamp object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Timestamp& x);

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            uint64_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport uint64_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport uint64_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Timestamp& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_sec;
    uint32_t m_nanosec;
};
/*!
 * @brief This class represents the structure Header defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Header
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Header();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Header();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            const Header& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header(
            Header&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            const Header& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Header that will be copied.
     */
    eProsima_user_DllExport Header& operator =(
            Header&& x);

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Header& x);

    /*!
     * @brief Comparison operator.
     * @param x Header object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Header& x);

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Header& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_sec;
    uint32_t m_nanosec;
    std::string m_frame_id;
};
/*!
 * @brief This class represents the structure Point defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Point
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Point();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Point();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Point that will be copied.
     */
    eProsima_user_DllExport Point(
            const Point& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Point that will be copied.
     */
    eProsima_user_DllExport Point(
            Point&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Point that will be copied.
     */
    eProsima_user_DllExport Point& operator =(
            const Point& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Point that will be copied.
     */
    eProsima_user_DllExport Point& operator =(
            Point&& x);

    /*!
     * @brief Comparison operator.
     * @param x Point object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Point& x);

    /*!
     * @brief Comparison operator.
     * @param x Point object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Point& x);

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Point& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
};
/*!
 * @brief This class represents the structure Quaternion defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Quaternion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Quaternion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Quaternion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Quaternion that will be copied.
     */
    eProsima_user_DllExport Quaternion(
            const Quaternion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Quaternion that will be copied.
     */
    eProsima_user_DllExport Quaternion(
            Quaternion&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Quaternion that will be copied.
     */
    eProsima_user_DllExport Quaternion& operator =(
            const Quaternion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Quaternion that will be copied.
     */
    eProsima_user_DllExport Quaternion& operator =(
            Quaternion&& x);

    /*!
     * @brief Comparison operator.
     * @param x Quaternion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Quaternion& x);

    /*!
     * @brief Comparison operator.
     * @param x Quaternion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Quaternion& x);

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();

    /*!
     * @brief This function sets a value in member w
     * @param _w New value for member w
     */
    eProsima_user_DllExport void w(
            double _w);

    /*!
     * @brief This function returns the value of member w
     * @return Value of member w
     */
    eProsima_user_DllExport double w() const;

    /*!
     * @brief This function returns a reference to member w
     * @return Reference to member w
     */
    eProsima_user_DllExport double& w();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Quaternion& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
    double m_w;
};
/*!
 * @brief This class represents the structure Vector3 defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Vector3
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Vector3();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Vector3();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Vector3 that will be copied.
     */
    eProsima_user_DllExport Vector3(
            const Vector3& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Vector3 that will be copied.
     */
    eProsima_user_DllExport Vector3(
            Vector3&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Vector3 that will be copied.
     */
    eProsima_user_DllExport Vector3& operator =(
            const Vector3& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Vector3 that will be copied.
     */
    eProsima_user_DllExport Vector3& operator =(
            Vector3&& x);

    /*!
     * @brief Comparison operator.
     * @param x Vector3 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Vector3& x);

    /*!
     * @brief Comparison operator.
     * @param x Vector3 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Vector3& x);

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Vector3& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
};
/*!
 * @brief This class represents the structure Vector3Stamped defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Vector3Stamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Vector3Stamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Vector3Stamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Vector3Stamped that will be copied.
     */
    eProsima_user_DllExport Vector3Stamped(
            const Vector3Stamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Vector3Stamped that will be copied.
     */
    eProsima_user_DllExport Vector3Stamped(
            Vector3Stamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Vector3Stamped that will be copied.
     */
    eProsima_user_DllExport Vector3Stamped& operator =(
            const Vector3Stamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Vector3Stamped that will be copied.
     */
    eProsima_user_DllExport Vector3Stamped& operator =(
            Vector3Stamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x Vector3Stamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Vector3Stamped& x);

    /*!
     * @brief Comparison operator.
     * @param x Vector3Stamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Vector3Stamped& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function copies the value in member vector
     * @param _vector New value to be copied in member vector
     */
    eProsima_user_DllExport void vector(
            const Vector3& _vector);

    /*!
     * @brief This function moves the value in member vector
     * @param _vector New value to be moved in member vector
     */
    eProsima_user_DllExport void vector(
            Vector3&& _vector);

    /*!
     * @brief This function returns a constant reference to member vector
     * @return Constant reference to member vector
     */
    eProsima_user_DllExport const Vector3& vector() const;

    /*!
     * @brief This function returns a reference to member vector
     * @return Reference to member vector
     */
    eProsima_user_DllExport Vector3& vector();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Vector3Stamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    Vector3 m_vector;
};
/*!
 * @brief This class represents the structure Pose defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Pose
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Pose();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Pose();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose(
            const Pose& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose(
            Pose&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose& operator =(
            const Pose& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose& operator =(
            Pose&& x);

    /*!
     * @brief Comparison operator.
     * @param x Pose object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Pose& x);

    /*!
     * @brief Comparison operator.
     * @param x Pose object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Pose& x);

    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    eProsima_user_DllExport void position(
            const Point& _position);

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    eProsima_user_DllExport void position(
            Point&& _position);

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    eProsima_user_DllExport const Point& position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport Point& position();
    /*!
     * @brief This function copies the value in member orientation
     * @param _orientation New value to be copied in member orientation
     */
    eProsima_user_DllExport void orientation(
            const Quaternion& _orientation);

    /*!
     * @brief This function moves the value in member orientation
     * @param _orientation New value to be moved in member orientation
     */
    eProsima_user_DllExport void orientation(
            Quaternion&& _orientation);

    /*!
     * @brief This function returns a constant reference to member orientation
     * @return Constant reference to member orientation
     */
    eProsima_user_DllExport const Quaternion& orientation() const;

    /*!
     * @brief This function returns a reference to member orientation
     * @return Reference to member orientation
     */
    eProsima_user_DllExport Quaternion& orientation();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Pose& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Point m_position;
    Quaternion m_orientation;
};
/*!
 * @brief This class represents the structure Twist defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Twist
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Twist();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Twist();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Twist that will be copied.
     */
    eProsima_user_DllExport Twist(
            const Twist& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Twist that will be copied.
     */
    eProsima_user_DllExport Twist(
            Twist&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Twist that will be copied.
     */
    eProsima_user_DllExport Twist& operator =(
            const Twist& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Twist that will be copied.
     */
    eProsima_user_DllExport Twist& operator =(
            Twist&& x);

    /*!
     * @brief Comparison operator.
     * @param x Twist object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Twist& x);

    /*!
     * @brief Comparison operator.
     * @param x Twist object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Twist& x);

    /*!
     * @brief This function copies the value in member linear
     * @param _linear New value to be copied in member linear
     */
    eProsima_user_DllExport void linear(
            const Vector3& _linear);

    /*!
     * @brief This function moves the value in member linear
     * @param _linear New value to be moved in member linear
     */
    eProsima_user_DllExport void linear(
            Vector3&& _linear);

    /*!
     * @brief This function returns a constant reference to member linear
     * @return Constant reference to member linear
     */
    eProsima_user_DllExport const Vector3& linear() const;

    /*!
     * @brief This function returns a reference to member linear
     * @return Reference to member linear
     */
    eProsima_user_DllExport Vector3& linear();
    /*!
     * @brief This function copies the value in member angular
     * @param _angular New value to be copied in member angular
     */
    eProsima_user_DllExport void angular(
            const Vector3& _angular);

    /*!
     * @brief This function moves the value in member angular
     * @param _angular New value to be moved in member angular
     */
    eProsima_user_DllExport void angular(
            Vector3&& _angular);

    /*!
     * @brief This function returns a constant reference to member angular
     * @return Constant reference to member angular
     */
    eProsima_user_DllExport const Vector3& angular() const;

    /*!
     * @brief This function returns a reference to member angular
     * @return Reference to member angular
     */
    eProsima_user_DllExport Vector3& angular();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Twist& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Vector3 m_linear;
    Vector3 m_angular;
};
/*!
 * @brief This class represents the structure TwistWithCovariance defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class TwistWithCovariance
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TwistWithCovariance();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TwistWithCovariance();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport TwistWithCovariance(
            const TwistWithCovariance& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport TwistWithCovariance(
            TwistWithCovariance&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport TwistWithCovariance& operator =(
            const TwistWithCovariance& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport TwistWithCovariance& operator =(
            TwistWithCovariance&& x);

    /*!
     * @brief Comparison operator.
     * @param x TwistWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TwistWithCovariance& x);

    /*!
     * @brief Comparison operator.
     * @param x TwistWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TwistWithCovariance& x);

    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const Twist& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            Twist&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const Twist& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport Twist& twist();
    /*!
     * @brief This function copies the value in member covariance
     * @param _covariance New value to be copied in member covariance
     */
    eProsima_user_DllExport void covariance(
            const std::vector<double>& _covariance);

    /*!
     * @brief This function moves the value in member covariance
     * @param _covariance New value to be moved in member covariance
     */
    eProsima_user_DllExport void covariance(
            std::vector<double>&& _covariance);

    /*!
     * @brief This function returns a constant reference to member covariance
     * @return Constant reference to member covariance
     */
    eProsima_user_DllExport const std::vector<double>& covariance() const;

    /*!
     * @brief This function returns a reference to member covariance
     * @return Reference to member covariance
     */
    eProsima_user_DllExport std::vector<double>& covariance();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TwistWithCovariance& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Twist m_twist;
    std::vector<double> m_covariance;
};
/*!
 * @brief This class represents the structure TwistWithCovarianceStamped defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class TwistWithCovarianceStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TwistWithCovarianceStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TwistWithCovarianceStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport TwistWithCovarianceStamped(
            const TwistWithCovarianceStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport TwistWithCovarianceStamped(
            TwistWithCovarianceStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport TwistWithCovarianceStamped& operator =(
            const TwistWithCovarianceStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport TwistWithCovarianceStamped& operator =(
            TwistWithCovarianceStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x TwistWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TwistWithCovarianceStamped& x);

    /*!
     * @brief Comparison operator.
     * @param x TwistWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TwistWithCovarianceStamped& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const TwistWithCovariance& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            TwistWithCovariance&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const TwistWithCovariance& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport TwistWithCovariance& twist();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TwistWithCovarianceStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    TwistWithCovariance m_twist;
};
/*!
 * @brief This class represents the structure Wrench defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Wrench
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Wrench();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Wrench();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench(
            const Wrench& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench(
            Wrench&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench& operator =(
            const Wrench& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Wrench that will be copied.
     */
    eProsima_user_DllExport Wrench& operator =(
            Wrench&& x);

    /*!
     * @brief Comparison operator.
     * @param x Wrench object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Wrench& x);

    /*!
     * @brief Comparison operator.
     * @param x Wrench object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Wrench& x);

    /*!
     * @brief This function copies the value in member force
     * @param _force New value to be copied in member force
     */
    eProsima_user_DllExport void force(
            const Vector3& _force);

    /*!
     * @brief This function moves the value in member force
     * @param _force New value to be moved in member force
     */
    eProsima_user_DllExport void force(
            Vector3&& _force);

    /*!
     * @brief This function returns a constant reference to member force
     * @return Constant reference to member force
     */
    eProsima_user_DllExport const Vector3& force() const;

    /*!
     * @brief This function returns a reference to member force
     * @return Reference to member force
     */
    eProsima_user_DllExport Vector3& force();
    /*!
     * @brief This function copies the value in member torque
     * @param _torque New value to be copied in member torque
     */
    eProsima_user_DllExport void torque(
            const Vector3& _torque);

    /*!
     * @brief This function moves the value in member torque
     * @param _torque New value to be moved in member torque
     */
    eProsima_user_DllExport void torque(
            Vector3&& _torque);

    /*!
     * @brief This function returns a constant reference to member torque
     * @return Constant reference to member torque
     */
    eProsima_user_DllExport const Vector3& torque() const;

    /*!
     * @brief This function returns a reference to member torque
     * @return Reference to member torque
     */
    eProsima_user_DllExport Vector3& torque();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Wrench& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Vector3 m_force;
    Vector3 m_torque;
};
/*!
 * @brief This class represents the structure WrenchStamped defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class WrenchStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport WrenchStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~WrenchStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object WrenchStamped that will be copied.
     */
    eProsima_user_DllExport WrenchStamped(
            const WrenchStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object WrenchStamped that will be copied.
     */
    eProsima_user_DllExport WrenchStamped(
            WrenchStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object WrenchStamped that will be copied.
     */
    eProsima_user_DllExport WrenchStamped& operator =(
            const WrenchStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object WrenchStamped that will be copied.
     */
    eProsima_user_DllExport WrenchStamped& operator =(
            WrenchStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x WrenchStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const WrenchStamped& x);

    /*!
     * @brief Comparison operator.
     * @param x WrenchStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const WrenchStamped& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function copies the value in member wrench
     * @param _wrench New value to be copied in member wrench
     */
    eProsima_user_DllExport void wrench(
            const Wrench& _wrench);

    /*!
     * @brief This function moves the value in member wrench
     * @param _wrench New value to be moved in member wrench
     */
    eProsima_user_DllExport void wrench(
            Wrench&& _wrench);

    /*!
     * @brief This function returns a constant reference to member wrench
     * @return Constant reference to member wrench
     */
    eProsima_user_DllExport const Wrench& wrench() const;

    /*!
     * @brief This function returns a reference to member wrench
     * @return Reference to member wrench
     */
    eProsima_user_DllExport Wrench& wrench();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const WrenchStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    Wrench m_wrench;
};
/*!
 * @brief This class represents the structure Image defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class Image
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Image();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Image();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Image that will be copied.
     */
    eProsima_user_DllExport Image(
            const Image& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Image that will be copied.
     */
    eProsima_user_DllExport Image(
            Image&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Image that will be copied.
     */
    eProsima_user_DllExport Image& operator =(
            const Image& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Image that will be copied.
     */
    eProsima_user_DllExport Image& operator =(
            Image&& x);

    /*!
     * @brief Comparison operator.
     * @param x Image object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Image& x);

    /*!
     * @brief Comparison operator.
     * @param x Image object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Image& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function copies the value in member encoding
     * @param _encoding New value to be copied in member encoding
     */
    eProsima_user_DllExport void encoding(
            const std::string& _encoding);

    /*!
     * @brief This function moves the value in member encoding
     * @param _encoding New value to be moved in member encoding
     */
    eProsima_user_DllExport void encoding(
            std::string&& _encoding);

    /*!
     * @brief This function returns a constant reference to member encoding
     * @return Constant reference to member encoding
     */
    eProsima_user_DllExport const std::string& encoding() const;

    /*!
     * @brief This function returns a reference to member encoding
     * @return Reference to member encoding
     */
    eProsima_user_DllExport std::string& encoding();
    /*!
     * @brief This function sets a value in member is_bigendian
     * @param _is_bigendian New value for member is_bigendian
     */
    eProsima_user_DllExport void is_bigendian(
            bool _is_bigendian);

    /*!
     * @brief This function returns the value of member is_bigendian
     * @return Value of member is_bigendian
     */
    eProsima_user_DllExport bool is_bigendian() const;

    /*!
     * @brief This function returns a reference to member is_bigendian
     * @return Reference to member is_bigendian
     */
    eProsima_user_DllExport bool& is_bigendian();

    /*!
     * @brief This function sets a value in member step
     * @param _step New value for member step
     */
    eProsima_user_DllExport void step(
            uint32_t _step);

    /*!
     * @brief This function returns the value of member step
     * @return Value of member step
     */
    eProsima_user_DllExport uint32_t step() const;

    /*!
     * @brief This function returns a reference to member step
     * @return Reference to member step
     */
    eProsima_user_DllExport uint32_t& step();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Image& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    uint32_t m_height;
    uint32_t m_width;
    std::string m_encoding;
    bool m_is_bigendian;
    uint32_t m_step;
    std::vector<uint8_t> m_data;
};
const uint8_t PointField__INT8 = 1;
const uint8_t PointField__UINT8 = 2;
const uint8_t PointField__INT16 = 3;
const uint8_t PointField__UINT16 = 4;
const uint8_t PointField__INT32 = 5;
const uint8_t PointField__UINT32 = 6;
const uint8_t PointField__FLOAT32 = 7;
const uint8_t PointField__FLOAT64 = 8;
/*!
 * @brief This class represents the structure PointField defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class PointField
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PointField();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PointField();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PointField that will be copied.
     */
    eProsima_user_DllExport PointField(
            const PointField& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PointField that will be copied.
     */
    eProsima_user_DllExport PointField(
            PointField&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PointField that will be copied.
     */
    eProsima_user_DllExport PointField& operator =(
            const PointField& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PointField that will be copied.
     */
    eProsima_user_DllExport PointField& operator =(
            PointField&& x);

    /*!
     * @brief Comparison operator.
     * @param x PointField object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PointField& x);

    eProsima_user_DllExport const bool operator ==(
            const PointField& x) const;

    /*!
     * @brief Comparison operator.
     * @param x PointField object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PointField& x);

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function sets a value in member offset
     * @param _offset New value for member offset
     */
    eProsima_user_DllExport void offset(
            uint32_t _offset);

    /*!
     * @brief This function returns the value of member offset
     * @return Value of member offset
     */
    eProsima_user_DllExport uint32_t offset() const;

    /*!
     * @brief This function returns a reference to member offset
     * @return Reference to member offset
     */
    eProsima_user_DllExport uint32_t& offset();

    /*!
     * @brief This function sets a value in member datatype
     * @param _datatype New value for member datatype
     */
    eProsima_user_DllExport void datatype(
            uint8_t _datatype);

    /*!
     * @brief This function returns the value of member datatype
     * @return Value of member datatype
     */
    eProsima_user_DllExport uint8_t datatype() const;

    /*!
     * @brief This function returns a reference to member datatype
     * @return Reference to member datatype
     */
    eProsima_user_DllExport uint8_t& datatype();

    /*!
     * @brief This function sets a value in member count
     * @param _count New value for member count
     */
    eProsima_user_DllExport void count(
            uint32_t _count);

    /*!
     * @brief This function returns the value of member count
     * @return Value of member count
     */
    eProsima_user_DllExport uint32_t count() const;

    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    eProsima_user_DllExport uint32_t& count();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const PointField& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_name;
    uint32_t m_offset;
    uint8_t m_datatype;
    uint32_t m_count;
};
/*!
 * @brief This class represents the structure PointCloud2 defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class PointCloud2
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PointCloud2();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PointCloud2();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PointCloud2 that will be copied.
     */
    eProsima_user_DllExport PointCloud2(
            const PointCloud2& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PointCloud2 that will be copied.
     */
    eProsima_user_DllExport PointCloud2(
            PointCloud2&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PointCloud2 that will be copied.
     */
    eProsima_user_DllExport PointCloud2& operator =(
            const PointCloud2& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PointCloud2 that will be copied.
     */
    eProsima_user_DllExport PointCloud2& operator =(
            PointCloud2&& x);

    /*!
     * @brief Comparison operator.
     * @param x PointCloud2 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PointCloud2& x);

    /*!
     * @brief Comparison operator.
     * @param x PointCloud2 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PointCloud2& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function copies the value in member fields
     * @param _fields New value to be copied in member fields
     */
    eProsima_user_DllExport void fields(
            const std::vector<PointField>& _fields);

    /*!
     * @brief This function moves the value in member fields
     * @param _fields New value to be moved in member fields
     */
    eProsima_user_DllExport void fields(
            std::vector<PointField>&& _fields);

    /*!
     * @brief This function returns a constant reference to member fields
     * @return Constant reference to member fields
     */
    eProsima_user_DllExport const std::vector<PointField>& fields() const;

    /*!
     * @brief This function returns a reference to member fields
     * @return Reference to member fields
     */
    eProsima_user_DllExport std::vector<PointField>& fields();
    /*!
     * @brief This function sets a value in member is_bigendian
     * @param _is_bigendian New value for member is_bigendian
     */
    eProsima_user_DllExport void is_bigendian(
            bool _is_bigendian);

    /*!
     * @brief This function returns the value of member is_bigendian
     * @return Value of member is_bigendian
     */
    eProsima_user_DllExport bool is_bigendian() const;

    /*!
     * @brief This function returns a reference to member is_bigendian
     * @return Reference to member is_bigendian
     */
    eProsima_user_DllExport bool& is_bigendian();

    /*!
     * @brief This function sets a value in member point_step
     * @param _point_step New value for member point_step
     */
    eProsima_user_DllExport void point_step(
            uint32_t _point_step);

    /*!
     * @brief This function returns the value of member point_step
     * @return Value of member point_step
     */
    eProsima_user_DllExport uint32_t point_step() const;

    /*!
     * @brief This function returns a reference to member point_step
     * @return Reference to member point_step
     */
    eProsima_user_DllExport uint32_t& point_step();

    /*!
     * @brief This function sets a value in member row_step
     * @param _row_step New value for member row_step
     */
    eProsima_user_DllExport void row_step(
            uint32_t _row_step);

    /*!
     * @brief This function returns the value of member row_step
     * @return Value of member row_step
     */
    eProsima_user_DllExport uint32_t row_step() const;

    /*!
     * @brief This function returns a reference to member row_step
     * @return Reference to member row_step
     */
    eProsima_user_DllExport uint32_t& row_step();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();
    /*!
     * @brief This function sets a value in member is_dense
     * @param _is_dense New value for member is_dense
     */
    eProsima_user_DllExport void is_dense(
            bool _is_dense);

    /*!
     * @brief This function returns the value of member is_dense
     * @return Value of member is_dense
     */
    eProsima_user_DllExport bool is_dense() const;

    /*!
     * @brief This function returns a reference to member is_dense
     * @return Reference to member is_dense
     */
    eProsima_user_DllExport bool& is_dense();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const PointCloud2& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    uint32_t m_height;
    uint32_t m_width;
    std::vector<PointField> m_fields;
    bool m_is_bigendian;
    uint32_t m_point_step;
    uint32_t m_row_step;
    std::vector<uint8_t> m_data;
    bool m_is_dense;
};
/*!
 * @brief This class represents the structure LaserScan defined by the user in the IDL file.
 * @ingroup DATATYPES
 */
class LaserScan
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LaserScan();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LaserScan();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LaserScan that will be copied.
     */
    eProsima_user_DllExport LaserScan(
            const LaserScan& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LaserScan that will be copied.
     */
    eProsima_user_DllExport LaserScan(
            LaserScan&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LaserScan that will be copied.
     */
    eProsima_user_DllExport LaserScan& operator =(
            const LaserScan& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LaserScan that will be copied.
     */
    eProsima_user_DllExport LaserScan& operator =(
            LaserScan&& x);

    /*!
     * @brief Comparison operator.
     * @param x LaserScan object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LaserScan& x);

    /*!
     * @brief Comparison operator.
     * @param x LaserScan object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LaserScan& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function sets a value in member angle_min
     * @param _angle_min New value for member angle_min
     */
    eProsima_user_DllExport void angle_min(
            float _angle_min);

    /*!
     * @brief This function returns the value of member angle_min
     * @return Value of member angle_min
     */
    eProsima_user_DllExport float angle_min() const;

    /*!
     * @brief This function returns a reference to member angle_min
     * @return Reference to member angle_min
     */
    eProsima_user_DllExport float& angle_min();

    /*!
     * @brief This function sets a value in member angle_max
     * @param _angle_max New value for member angle_max
     */
    eProsima_user_DllExport void angle_max(
            float _angle_max);

    /*!
     * @brief This function returns the value of member angle_max
     * @return Value of member angle_max
     */
    eProsima_user_DllExport float angle_max() const;

    /*!
     * @brief This function returns a reference to member angle_max
     * @return Reference to member angle_max
     */
    eProsima_user_DllExport float& angle_max();

    /*!
     * @brief This function sets a value in member angle_increment
     * @param _angle_increment New value for member angle_increment
     */
    eProsima_user_DllExport void angle_increment(
            float _angle_increment);

    /*!
     * @brief This function returns the value of member angle_increment
     * @return Value of member angle_increment
     */
    eProsima_user_DllExport float angle_increment() const;

    /*!
     * @brief This function returns a reference to member angle_increment
     * @return Reference to member angle_increment
     */
    eProsima_user_DllExport float& angle_increment();

    /*!
     * @brief This function sets a value in member time_increment
     * @param _time_increment New value for member time_increment
     */
    eProsima_user_DllExport void time_increment(
            float _time_increment);

    /*!
     * @brief This function returns the value of member time_increment
     * @return Value of member time_increment
     */
    eProsima_user_DllExport float time_increment() const;

    /*!
     * @brief This function returns a reference to member time_increment
     * @return Reference to member time_increment
     */
    eProsima_user_DllExport float& time_increment();

    /*!
     * @brief This function sets a value in member scan_time
     * @param _scan_time New value for member scan_time
     */
    eProsima_user_DllExport void scan_time(
            float _scan_time);

    /*!
     * @brief This function returns the value of member scan_time
     * @return Value of member scan_time
     */
    eProsima_user_DllExport float scan_time() const;

    /*!
     * @brief This function returns a reference to member scan_time
     * @return Reference to member scan_time
     */
    eProsima_user_DllExport float& scan_time();

    /*!
     * @brief This function sets a value in member range_min
     * @param _range_min New value for member range_min
     */
    eProsima_user_DllExport void range_min(
            float _range_min);

    /*!
     * @brief This function returns the value of member range_min
     * @return Value of member range_min
     */
    eProsima_user_DllExport float range_min() const;

    /*!
     * @brief This function returns a reference to member range_min
     * @return Reference to member range_min
     */
    eProsima_user_DllExport float& range_min();

    /*!
     * @brief This function sets a value in member range_max
     * @param _range_max New value for member range_max
     */
    eProsima_user_DllExport void range_max(
            float _range_max);

    /*!
     * @brief This function returns the value of member range_max
     * @return Value of member range_max
     */
    eProsima_user_DllExport float range_max() const;

    /*!
     * @brief This function returns a reference to member range_max
     * @return Reference to member range_max
     */
    eProsima_user_DllExport float& range_max();

    /*!
     * @brief This function copies the value in member ranges
     * @param _ranges New value to be copied in member ranges
     */
    eProsima_user_DllExport void ranges(
            const std::vector<float>& _ranges);

    /*!
     * @brief This function moves the value in member ranges
     * @param _ranges New value to be moved in member ranges
     */
    eProsima_user_DllExport void ranges(
            std::vector<float>&& _ranges);

    /*!
     * @brief This function returns a constant reference to member ranges
     * @return Constant reference to member ranges
     */
    eProsima_user_DllExport const std::vector<float>& ranges() const;

    /*!
     * @brief This function returns a reference to member ranges
     * @return Reference to member ranges
     */
    eProsima_user_DllExport std::vector<float>& ranges();
    /*!
     * @brief This function copies the value in member intensities0
     * @param _intensities0 New value to be copied in member intensities0
     */
    eProsima_user_DllExport void intensities0(
            const std::vector<float>& _intensities0);

    /*!
     * @brief This function moves the value in member intensities0
     * @param _intensities0 New value to be moved in member intensities0
     */
    eProsima_user_DllExport void intensities0(
            std::vector<float>&& _intensities0);

    /*!
     * @brief This function returns a constant reference to member intensities0
     * @return Constant reference to member intensities0
     */
    eProsima_user_DllExport const std::vector<float>& intensities0() const;

    /*!
     * @brief This function returns a reference to member intensities0
     * @return Reference to member intensities0
     */
    eProsima_user_DllExport std::vector<float>& intensities0();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LaserScan& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    float m_angle_min;
    float m_angle_max;
    float m_angle_increment;
    float m_time_increment;
    float m_scan_time;
    float m_range_min;
    float m_range_max;
    std::vector<float> m_ranges;
    std::vector<float> m_intensities0;
};

#endif // _DATATYPES_H_
